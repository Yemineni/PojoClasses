 - we can provide communication between controllers in 4 ways.

 1. $broadcast

 2. $emit

 3. $rootScope

 4. Custom Services



$broadcast:
    - sharing the data from parent controllers to child controllers
      called as broadcast communication.

Ex.
    <div ng-controller="parent_controller">
        <input type="text" ng-model="my_model">
        <button ng-click="clickMe(my_model)">BroadCast</button>

        <div ng-controller="child_controller">
            <h1>{{var_one}}</h1>
        </div>
    </div>


    app.controller("parent_controller",parent_controller);
    function parent_controller($scope){
        $scope.clickMe = function(arg1){
            $scope.$broadcast("key1",arg1);
        };
    };

    app.controller("child_controller",child_controller);
    function child_controller($scope){
        $scope.$on("key1",function(event,res){
            $scope.var_one=res;
        });
    };


$emit:
    - sharing the data from child controllers to parent controllers
      called as emit communication.

Ex.
    <div ng-controller="ctrl_one">
        <h1>{{var_one}}</h1>

        <div ng-controller="ctrl_two">
            <input type="text" ng-model="my_model"> <br>
            <button ng-click="clickMe(my_model)">ClickMe</button>
        </div>
    </div>


    app.controller("ctrl_two",ctrl_two);
    function ctrl_two($scope){
        $scope.clickMe = function(arg1){
            $scope.$emit("key1",arg1);
        }
    }

    app.controller("ctrl_one",ctrl_one);
    function ctrl_one($scope){
        $scope.$on("key1",function(event,res){
            $scope.var_one=res;
        });
    };


3. rootScope communication
    - we can communication between controllers by using "$rootScope".



<div ng-controller="ctrl_one">
    <input type="text" ng-model="my_model"> <br>
    <button ng-click="clickMe(my_model)">ClickMe</button>
</div>


<div ng-controller="ctrl_two">
    <h1>{{var_one}}</h1>
</div>



app.controller("ctrl_one",ctrl_one);
function ctrl_one($scope){
    $scope.clickMe = function(arg1){
        $scope.my_fun(arg1);
    };
};

app.controller("ctrl_two",ctrl_two);
function ctrl_two($rootScope,$scope){
    $rootScope.my_fun = function(arg1){
        $scope.var_one = arg1;
    };
};


Communication Between Controllers By using Custom Services:
-----------------------------------------------------------
    - services in angularjs provides the common services to
      controllers.

    - we have two types of services

        1. predefined services

        2. custom services


predefined services:

    - services provided by the framework called as predefined services

custom services:

    - the services developed by developer based on application requirement
      called as custom services.



app.service("my_service",my_service);

function my_service(){

    this.my_var="";

    this.setMyVar = function(arg1){
        this.my_var=arg1;
    }

    this.getMyVar = function(){
        return this.my_var;
    }
}


- setMyVar() function will get the data from ctrl_one and
  stores into my_var;

- getMyVar() returns the "my_var"

app.controller("ctrl_one",ctrl_one);
function ctrl_one($scope,my_service){
    $scope.clickMe = function(arg1){
       my_service.setMyVar(arg1);
    }
}


app.controller("ctrl_two",ctrl_two);
function ctrl_two($scope,my_service){
    $scope.clickMe = function(){
       $scope.var_one = my_service.getMyVar();
    }
}


------------------
ctrl_one.html

ctrl_two.html

my_service.js

ctrl_one.js

ctrl_two.js

app.js

index.html
-------------------



