NodeJS:
-------
    - NodeJS is the server side scripting language.

    - by using nodejs, we can create the both http & tcp servers.

    - nodejs supports the modules
        (predefined modules & custom modules)

modules in nodejs
-----------------
1. express
    - this module used to develop the rest api(web services).

2. mysql
    - this module used to interact with the mysql database.

3. mongodb
    - this module used to interact with the mongodb.

4. jwt-simple
    - this module used to maintain the token based authentication system.

5. body-parser
    - this module used to set the MIME Type.

    Ex.
        json
        xml
        text
        csv
        --
        --
        --

6. http
    - this module used to develop the http servers.

7. multer
    - this module used to handle the multimedia files.

[Note : we can download required modules by using "package.json" file]

[Note : we can execute the package.json file by using "npm install" command]

- when ever we execute "npm install" automatically modules will be
  downloaded to node_modules folder.

- we can start the node server by using "npm start" command



Ex_1:
    launch the angular application by using nodejs.

Step 1:
    download the express module by using package.json file.

package.json
------------
{
    "name":"nareshit",
    "version":"1.0.0",
    "description": "first node application",
    "dependencies":{
        "express":"latest"
    }
}

>npm install
[Automatically express module will downloads to "node_modules" folder]



Step 2:
    create the angular application
Ex.
    index.html

<!DOCTYPE html>
<html ng-app="app" ng-controller="ctrl">
    <h1>{{var_one}}</h1>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.min.js"></script>
    <script>
        var app = angular.module("app",[]);
        app.controller("ctrl",ctrl);
        function ctrl($scope){
            $scope.var_one = "Basic Node Example with Angular Example";
        }
    </script>
</html>

Step 3:
    create the server file (node server)


server.js
---------
//import express module
var express = require("express");


//create the server instance
var app = express();

//"app" is the javascript object
//"app" used to deploy the projects
//by using "app" object we can deploy projects like angular, react
    java, dot net, php.....


//deploy the angular project
app.use(express.static(__dirname+"/../Basic_NodeEx"));


//assign the port no.
app.listen(8080);
console.log("Server Listening the Port No.8080");

>npm start (starting the server)


-------------
NodeJS
    Basic_NodeEx
        index.html
        server.js
        package.json
--------------


Ex_2:
    interacting the mysql database.



MySQL Queries:
--------------
1. create the schema (database)

mysql> create schema demo;
Query OK, 1 row affected (0.00 sec)


2. switch to schema
mysql> use demo;
Database changed

3. create table
mysql> create table products(p_id integer,
                             p_name varchar(20),
                             p_cost integer);

Query OK, 0 rows affected (0.16 sec)


4. insert the data.
mysql> insert into products values(111,'p_one',10000);
Query OK, 1 row affected (0.08 sec)


5. fetch the data from table.
>select * from products;



server.js
---------
var mysql = require("mysql");
var express = require("express");
app.use(express.static(__dirname+"/../Node_MySQLData"));


//connection object
var connection = mysql.createConnection({
    host:"localhost",
    user : "root",
    password:"root",
    database : "demo"
});
//connect to database.
connection.connect();
//create the rest api.
app.get("/products",function(req,res){
    connection.query("select * from products",function(err,
                                                       recordsArray,
                                                       fields){
        res.send(recordsArray);
    });

});
//assign the port no.
app.listen(8080);

Example_3:
    interacting with the static files


Example_4:
    interacting with mongodb.


- MongoDB Supports JSON.

- As a MongoDB Developer, we can perform the CRUD Operations on JSON.

- MongoDB is ligth weigth database compared to other databases.

- MongoDB Follows the Client Server Architecture.

Installation Of MongoDB:
------------------------

website : https://www.mongodb.com/
file name : mongodb-win32-x86_64-2008plus-ssl-3.4.7-signed.msi

create the directory structure:
-------------------------------
C:/data/db

set the path environmental variable:
------------------------------------
path = "C:\Program Files\MongoDB\Server\3.4\bin"


MongoDB Queries:
----------------
1. start the server
>mongod

2. connect to server
>mongo

3. show the available databases
>show dbs;

4.create and switch the database.
>use demo;

5.create the collection.
>db.createCollection("products");

6. insert the JSON Objects to Collection.
>db.products.insert({"p_id":111,"p_name":"p_one","p_cost":10000});

7.Query the Collection.
>db.products.find();

8.drop the database.
>db.dropDataBase();



server.js
---------

var express = require("express");
var mongodb = require("mongodb");
var app = express();
app.use(express.static(__dirname+"/../Node_MongoDB"));

//create the mongo client
var nareshIT = mongodb.MongoClient;

app.get("/products",function(req,res){
   nareshIT.connect("mongodb://localhost:27017/demo",function(err,db){
        db.collection("products").find().toArray(function(err,array){
            res.send(array);
        });
   });
});
app.listen(8080);
